<?php
// $Id$

/**
 * @file
 * Feeds tests.
 */

// Require FeedsWebTestCase class definition.
require_once(dirname(__FILE__) .'/feeds.test.inc');

/**
 * Test operation of Feeds UI elements. While the entire admin UI sits in
 * feeds_ui module, feeds module contains UI elements for non-admin functionality.
 */
class FeedsUserInterfaceTestCase extends FeedsWebTestCase {

  /**
   * Describe this test.
   */
  public function getInfo() {
    return array(
      'name' => t('Feeds user interface'),
      'description' => t('Tests Feeds module\'s GUI.'),
      'group' => t('Feeds'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    // @todo: once we have default configurations shipping with feeds, we do not need feeds_ui.
    parent::setUp('feeds', 'feeds_ui', 'ctools');

    $this->drupalLogin(
      $this->drupalCreateUser(
        array(
          'administer feeds', 'use feeds', 'create story content', 'create page content', 'delete own story content',
        )
      )
    );
  }

  /**
   * Test node creation, refreshing/deleting feeds and feed items.
   */
  public function testFeedNodeCreation() {

    // Create a feed.
    $this->createFeedConfiguration('Syndication feed', 'syndication');

    // Create a feed node.
    $edit = array(
      'title' => 'Development Seed',
      'feeds[FeedsHttpFetcher][url]' => $GLOBALS['base_url'] .'/'. drupal_get_path('module', 'feeds') .'/tests/feeds/developmentseed.rss2',
      );
    $this->drupalPost('node/add/page', $edit, 'Save');
    $this->assertText('Created 10 story nodes.');
    $this->assertText('Page Development Seed has been created.');

    // Get the URL and node id.
    $url = $this->getUrl();
    $matches = array();
    preg_match('/node\/(\d+?)$/', $this->getUrl(), $matches);
    $nid = $matches[1];
    $this->assertTrue(is_numeric($nid), 'Found node id ('. $nid .').');

    // Assert accuracy of aggregated information.
    $this->drupalGet('node');
    $this->assertText('Open Atrium Translation Workflow: Two Way Translation Updates');
    $this->assertText('Tue, 10/06/2009');
    $this->assertText('Week in DC Tech: October 5th Edition');
    $this->assertText('Mon, 10/05/2009');
    $this->assertText('Mapping Innovation at the World Bank with Open Atrium');
    $this->assertText('Fri, 10/02/2009');
    $this->assertText('September GeoDC Meetup Tonight');
    $this->assertText('Wed, 09/30/2009');
    $this->assertText('Week in DC Tech: September 28th Edition');
    $this->assertText('Mon, 09/28/2009');
    $this->assertText('Open Data for Microfinance: The New MIXMarket.org');
    $this->assertText('Thu, 09/24/2009');
    $this->assertText('Integrating the Siteminder Access System in an Open Atrium-based Intranet');
    $this->assertText('Tue, 09/22/2009');
    $this->assertText('Week in DC Tech: September 21 Edition');
    $this->assertText('Mon, 09/21/2009');
    $this->assertText('s Software Freedom Day: Impressions and Photos');
    $this->assertText('Mon, 09/21/2009');
    $this->assertText('Scaling the Open Atrium UI');
    $this->assertText('Fri, 09/18/2009');

    // Assert DB status.
    $count = db_result(db_query('SELECT COUNT(*) FROM {feeds_node_item}'));
    $this->assertEqual($count, 10, 'Accurate number of items in database.');

    // Import again.
    $this->drupalPost('node/'. $nid .'/import', array(), 'Import');
    $this->assertText('There is no new content.');

    // Assert DB status, there still shouldn't be more than 10 items.
    $count = db_result(db_query('SELECT COUNT(*) FROM {feeds_node_item}'));
    $this->assertEqual($count, 10, 'Accurate number of items in database.');

    // Now delete all items.
    $this->drupalPost('node/'. $nid .'/delete-items', array(), 'Delete');
    $this->assertText('Deleted 10 nodes.');

    // Assert DB status, now there should be no items.
    // @todo: fails, is there something cached?
    $count = db_result(db_query('SELECT COUNT(*) FROM {feeds_node_item}'));
    $this->assertEqual($count, 0, 'Accurate number of items in database.');

    // Import again, we should find new content.
    $this->drupalPost('node/'. $nid .'/import', array(), 'Import');
    $this->assertText('Created 10 story nodes.');

    // Assert DB status, there should be 10 again.
    $count = db_result(db_query('SELECT COUNT(*) FROM {feeds_node_item}'));
    $this->assertEqual($count, 10, 'Accurate number of items in database.');

    // @todo: log out, create user without create/delete story permissions, test again.
  }
}

/**
 * Test cron scheduling.
 *
 * @todo.
 */
class FeedsSchedulerTestCase extends DrupalWebTestCase {

  /**
   * Describe this test.
   */
  public function getInfo() {
    return array(
      'name' => t('Feeds Scheduler'),
      'description' => t('Unit tests for feeds scheduler.'),
      'group' => t('Feeds'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp('feeds', 'ctools');

    $this->drupalLogin(
      $this->drupalCreateUser(
        array(
          'administer feeds', 'use feeds', 'create story content', 'create page content',
        )
      )
    );
  }

  /**
   * Test scheduling on cron.
   */
  public function testScheduling() {
  }
}