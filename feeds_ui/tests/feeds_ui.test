<?php
// $Id$
/**
 * @file
 * Tests for Feeds Admin UI module.
 */

/**
 * Test basic Data API functionality.
 */
class FeedsUITestCase extends DrupalWebTestCase {

  /**
   * Describe this test.
   */
  public function getInfo() {
    return array(
      'name' => t('Feeds UI'),
      'description' => t('Tests Feeds UI module\'s GUI.'),
      'group' => t('Feeds'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp('feeds', 'feeds_ui', 'ctools');

    $this->drupalLogin(
      $this->drupalCreateUser(
        array(
          'administer feeds', 'use feeds', 'create story content', 'create page content',
        )
      )
    );
  }

  /**
   * UI functionality tests on
   * feeds_ui_overview(),
   * feeds_ui_create_form(),
   * Change plugins on feeds_ui_edit_page().
   */
  public function testEditFeedConfiguration() {

    // Create a feed.
    $this->createFeedConfiguration('Test feed', 'test_feed');

    // Assert UI elements.
    $this->drupalGet('admin/build/feeds/edit/test_feed');
    $this->assertText('Basic settings');
    $this->assertText('Fetcher');
    $this->assertText('HTTP Fetcher');
    $this->assertText('Parser');
    $this->assertText('Common syndication parser');
    $this->assertText('Processor');
    $this->assertText('Node processor');
    $this->assertText('Help');
    $this->assertRaw('admin/build/feeds/edit/test_feed/settings/Feed');
    $this->assertRaw('admin/build/feeds/edit/test_feed/settings/FeedsNodeProcessor');
    $this->assertRaw('admin/build/feeds/edit/test_feed/fetcher');
    $this->assertRaw('admin/build/feeds/edit/test_feed/parser');
    $this->assertRaw('admin/build/feeds/edit/test_feed/processor');
    $this->drupalGet('import');
    $this->assertText('Test feed');

    // Select some other plugins.
    $this->drupalGet('admin/build/feeds/edit/test_feed');

    $this->clickLink('Change', 0);
    $this->assertText('Select a fetcher');
    $this->drupalPost('admin/build/feeds/edit/test_feed/fetcher', array(), 'Select');

    $this->clickLink('Change', 1);
    $this->assertText('Select a parser');
    $this->drupalPost('admin/build/feeds/edit/test_feed/parser', array(), 'Select');

    $this->clickLink('Change', 2);
    $this->assertText('Select a processor');
    $this->drupalPost('admin/build/feeds/edit/test_feed/processor', array(), 'Select');

    // Assert changed configuration.
    $this->assertPlugins('test_feed', 'FeedsFileFetcher', 'FeedsCSVParser', 'FeedsDataProcessor');

    // Delete feed.
    $this->drupalPost('admin/build/feeds/delete/test_feed', array(), 'Delete');
    $this->drupalGet('import');
    $this->assertNoText('Test feed');

    // Create the same feed again.
    $this->createFeedConfiguration('Test feed', 'test_feed');

    // Test basic settings settings.
    $edit = array(
      'name' => 'Syndication feed',
      'content_type' => 'page',
      'refresh_period' => 3600,
    );
    $this->drupalPost('admin/build/feeds/edit/test_feed/settings/Feed', $edit, 'Save');

    // Assert results of change.
    $this->assertText('Edit Syndication feed');
    $this->assertText('Attached to: Page');
    $this->assertText('Refresh: every 1 hour');
    $this->drupalGet('admin/build/feeds');
    $this->assertLink('Page'); // See whether string 'Page' shows up in table.

    // Configure processor.
    $edit = array(
      'content_type' => 'story',
    );
    $this->drupalPost('admin/build/feeds/edit/test_feed/settings/FeedsNodeProcessor', $edit, 'Save');
    $this->assertRaw('value="story" selected="selected"');

    // Create a feed node.
    $edit = array(
      'title' => 'Development Seed',
      'feeds[feeds_source]' => $GLOBALS['base_url'] .'/'. drupal_get_path('module', 'feeds') .'/tests/feeds/developmentseed.rss2',
      );
    $this->drupalPost('node/add/page', $edit, 'Save');
    $this->assertText('Page Development Seed has been created.');

    // @todo: refreshing/deleting feed items. Needs to live in feeds.test
  }

  /**
   * Create feed config.
   */
  public function createFeedConfiguration($name, $id) {
    // Create new feed configuration.
    $this->drupalGet('admin/build/feeds');
    $this->clickLink('New configuration');
    $edit = array(
      'name' => $name,
      'id' => $id,
    );
    $this->drupalPost('admin/build/feeds/create', $edit, 'Create');

    // Assert message and presence of default plugins.
    $this->assertText('Your feed has been created with default settings.');
    $this->assertPlugins('test_feed', 'FeedsHttpFetcher', 'FeedsSyndicationParser', 'FeedsNodeProcessor');
  }

  /**
   * Assert a feeds configuration's plugins.
   */
  public function assertPlugins($id, $fetcher, $parser, $processor) {
    // Assert actual configuration.
    $result = db_query('SELECT * FROM {feeds_config} WHERE id = "%s"', $id);
    $config = array();
    while ($row = db_fetch_object($result)) {
      $config[$row->class] = unserialize($row->config);
    }
    $this->assertEqual($config['Feed']['fetcher'], $fetcher, 'Correct fetcher');
    $this->assertEqual($config['Feed']['parser'], $parser, 'Correct parser');
    $this->assertEqual($config['Feed']['processor'], $processor, 'Correct processor');
  }
}