<?php
// $Id: feeds_ui.module,v 1.6 2009/09/21 14:55:47 alexb Exp $
/**
 * @file
 */

/**
 * Implementation of hook_help().
 */
function feeds_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/build/feeds':
      $output = '<p>'. t('Configure one or more feeds to import content into Drupal. You can use these configurations from the !import_page or - if you attach them to a content type - simply by creating a node from that content type.', array('!import_page' => l(t('Import content page'), 'import'))) .'</p>';
      return $output;
    case 'admin/content/feeds':
      $output = '<p>'. t('Import content into Drupal.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function feeds_ui_menu() {
  $items = array();
  $items['admin/build/feeds'] = array(
    'title' => 'Feeds',
    'description' => 'Configure feeds to import or aggregate RSS and Atom feeds, import CSV files or more.',
    'page callback' => 'feeds_ui_overview_page',
    'access arguments' => array('administer feeds'),
    'file' => 'feeds_ui.admin.inc',
  );
  $items['admin/build/feeds/list'] = array(
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/build/feeds/create'] = array(
    'title' => t('New configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_ui_create_form'),
    'access arguments' => array('administer feeds'),
    'file' => 'feeds_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/build/feeds/edit/%feeds'] = array(
    'title callback' => 'feed_ui_title',
    'title arguments' => array(4),
    'page callback' => 'feeds_ui_edit_page',
    'page arguments' => array(4),
    'access arguments' => array('administer feeds'),
    'file' => 'feeds_ui.admin.inc',
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/build/feeds/delete/%feeds'] = array(
    'title' => t('Delete configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_ui_delete_form', 4),
    'access arguments' => array('administer feeds'),
    'file' => 'feeds_ui.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function feeds_ui_theme() {
  return array(
    'feeds_ui_mapping_form' => array(
      'file' => 'feeds_ui.admin.inc',
    ),
    'feeds_ui_edit_page' => array(
      'file' => 'feeds_ui.admin.inc',
    ),
    'feeds_ui_container' => array(
      'file' => 'feeds_ui.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_forms().
 */
function feeds_ui_forms() {
  // Declare form callbacks for all known classes derived from FeedsConfigurable.
  $forms = array();
  $plugins = feeds_get_plugins();
  foreach ($plugins as $plugin) {
    $forms[$plugin['handler']['class'] .'_feeds_ui_select_form']['callback'] = 'feeds_ui_select_form';
  }
  $forms += feeds_ui_register_form();
  return $forms;
}

/**
 * Title callback.
 */
function feed_ui_title($feed) {
  return t('Edit !feed', array('!feed' => $feed->config['name']));
}

/**
 * Register a form callback and generate a unique form_id for it.
 * 
 * @param $form_callback
 *   A callback that returns a Form API form definition.
 * 
 * @return 
 *   If $form_callback is given, a unique form id for the callback.
 *   If $form_callback is not given, a hook_forms() compatible array
 *   of all registered forms.
 */
function feeds_ui_register_form($form_callback = NULL) {
  static $registered = array();
  static $count = 0;

  if ($form_callback) {

    while (TRUE) {
      $callback = $form_callback .'_'. ($count++);
      if (!isset($registered[$callback])) {
        $registered[$callback]['callback'] = $form_callback;
        return $callback;
      }
    }
  }
  return $registered;
}
