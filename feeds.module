<?php
// $Id: feeds.module,v 1.7 2009/09/21 14:55:47 alexb Exp $
/**
 * @file
 * Feeds module.
 */

/**
 * Implementation of hook_cron().
 */
function feeds_cron() {
  feeds_include('queue');
  feeds_queue_refresh();
}

/**
 * Implementation of hook_perm().
 */
function feeds_perm() {
  return array('use feeds', 'administer feeds');
}

/**
 * Implementation of hook_forms().
 */
function feeds_forms() {
  // Declare form callbacks for all known classes derived from FeedsConfigurable.
  $forms = array();
  $forms['Feed_feeds_config_form']['callback'] = 'feeds_config_form';
  $plugins = feeds_get_plugins();
  foreach ($plugins as $plugin) {
    // See feeds_get_config_form().
    $forms[$plugin['handler']['class'] .'_feeds_config_form']['callback'] = 'feeds_config_form';
    // See feeds_ui_get_select_form().
    $forms[$plugin['handler']['class'] .'_feeds_ui_select_form']['callback'] = 'feeds_ui_select_form';
  }
  return $forms;
}

/**
 * Implementation of hook_menu().
 */
function feeds_menu() {
  // Register a callback for all feed configurations that are not attached to a content type.
  $items = array();
  foreach (feeds_load_all() as $feed) {
    if (empty($feed->config['content_type'])) {
      $items['import/'. $feed->id] = array(
        'title' => $feed->config['name'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('feeds_form', $feed->id),
        'access arguments' => array('use feeds'),
        'file' => 'feeds.pages.inc',
        'type' => MENU_NORMAL_ITEM,
      );
    }
  }
  if (count($items)) {
    $items['import'] = array(
      'title' => 'Import content',
      'page callback' => 'feeds_page',
      'access arguments' => array('use feeds'),
      'file' => 'feeds.pages.inc',
    );
  }
  return $items;
}

/**
 * Menu loader callback.
 */
function feeds_load($id) {
  return feeds_instance('Feed', $id);
}

/**
 * Implementation of hook_form_alter().
 */
function feeds_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    $feeds = feeds_load_all();
    foreach ($feeds as $feed) {
      if ($feed->config['content_type'] == $form['type']['#value']) {
        $form['feeds'] = array(
          '#type' => 'fieldset',
          '#title' => t('Feed'),
        );
        $form['feeds'] += $feed->fetcher->sourceForm($form_state);;
      }
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_feeds_plugins().
 * 
 * @todo: Document API. Uses CTools plugin handling, extra keys:
 * 'description', 'hidden'
 * 
 * @todo: Also declare and load Feed and FeedsConfigurable class with this API?
 */
function feeds_feeds_plugins() {
  $path = drupal_get_path('module', 'feeds') .'/plugins';

  $info = array();
  $info['FeedsFetcher'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'class' => 'FeedsFetcher',
      'file' => 'FeedsFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsParser'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'class' => 'FeedsParser',
      'file' => 'FeedsParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsProcessor'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'class' => 'FeedsProcessor',
      'file' => 'FeedsProcessor.inc',
      'path' => $path,
    ),
  );
  $info['FeedsHttpFetcher'] = array(
    'name' => 'HTTP Fetcher',
    'description' => 'Download content from a URL.',
    'handler' => array(
      'parent' => 'FeedsFetcher', // This is the key name, not the class name.
      'class' => 'FeedsHttpFetcher',
      'file' => 'FeedsHttpFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsFileFetcher'] = array(
    'name' => 'File fetcher',
    'description' => 'Upload content from a local file.',
    'handler' => array(
      'parent' => 'FeedsHttpFetcher',
      'class' => 'FeedsFileFetcher',
      'file' => 'FeedsFileFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsCSVParser'] = array(
    'name' => 'CSV parser',
    'description' => 'Parse data in Comma Separated Value format.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsCSVParser',
      'file' => 'FeedsCSVParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsSyndicationParser'] = array(
    'name' => 'Common syndication parser',
    'description' => 'Parse XML feeds in RSS 1, RSS 2 or Atom format.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsSyndicationParser',
      'file' => 'FeedsSyndicationParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsNodeProcessor'] = array(
    'name' => 'Node processor',
    'description' => 'Create nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'FeedsNodeProcessor',
      'file' => 'FeedsNodeProcessor.inc',
      'path' => $path,
    ),
  );
  $info['FeedsDataProcessor'] = array(
    'name' => 'Data processor',
    'description' => 'Create data table records from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'FeedsDataProcessor',
      'file' => 'FeedsDataProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Get all available plugins. Does not list hidden plugins.
 * 
 * @return 
 *   An array where the keys are the plugin keys and the values
 *   are the plugin info arrays as defined in hook_feeds_plugins().
 */
function feeds_get_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('feeds', 'plugins');

  $result = array();
  foreach ($plugins as $key => $info) {
    if ($info['hidden'] == TRUE) {
      continue;
    }
    $result[$key] = $info;
  }
  return $result;  
}

/**
 * Get all available plugins categorized by whether they are a 
 * fetcher, a parser or a processor plugin.
 * 
 * Does not list hidden plugins.
 */
function feeds_get_plugins_by_type() {
  $plugins = feeds_get_plugins();

  $result = array();
  foreach ($plugins as $key => $info) {
    if (feeds_plugin_child($key, 'FeedsFetcher')) {
      $result['fetcher'][$key] = $info;
    }
    elseif (feeds_plugin_child($key, 'FeedsParser')) {
      $result['parser'][$key] = $info;
    }
    elseif (feeds_plugin_child($key, 'FeedsProcessor')) {
      $result['processor'][$key] = $info;
    }
  }
  return $result;
}

/**
 * Load a plugin's class file.
 * 
 * @param $plugin
 *   The key of the plugin.
 * 
 * @return 
 *   String that identifies the class name associated with this plugin.
 *   The class name is the one specified in the plugins $info['handler'] property.
 */
function feeds_load_plugin_class($plugin) {
  return ctools_plugin_load_class('feeds', 'plugins', $plugin, 'handler');
}

/**
 * Load all feeds.
 */
function feeds_load_all() {
  ctools_include('export');
  $configs = ctools_export_load_object('feeds_config', 'conditions', array('class' => 'Feed'));
  $feeds = array();
  foreach ($configs as $config) {
    $feeds[$config->id] = feeds_instance('Feed', $config->id);
  }
  return $feeds;
}

/**
 * Get an instance of a given class for a given id.
 * 
 * @param $class
 *   A string that is the name of the class to instantiate.
 * @param $id
 *   A string that is the id of the object.
 */
function feeds_instance($class, $id) {
  feeds_include('feed');
  return FeedsConfigurable::instance($class, $id);
}

/**
 * Get an instance of a class for a given plugin and id.
 * 
 * @param $class
 *   A string that is the key of the plugin to load.
 * @param $id
 *   A string that is the id of the object.
 */
function feeds_plugin_instance($plugin, $id) {
  if ($class = feeds_load_plugin_class($plugin)) {
    return feeds_instance($class, $id);
  }
  return NULL;
}

/**
 * Delete a feed.
 */
function feeds_delete($id) {
  db_query('DELETE FROM {feeds_config} WHERE id = "%s"', $id);
}

/**
 * Includes a feeds module include file.
 */
function feeds_include($file) {
  static $included = array();
  if (!isset($included[$file])) {
    require_once './' . drupal_get_path('module', 'feeds') . "/includes/$file.inc";
  }

  $included[$file] = TRUE;
}

/**
 * Determines whether given plugin is derived from given base plugin.
 * 
 * @param $plugin
 *   String that identifies a Feeds plugin key.
 * @param $parent_plugin
 *   String that identifies a Feeds plugin key to be tested against.
 * 
 * @return 
 *   TRUE if $parent_plugin is directly *or indirectly* a parent of $plugin,
 *   FALSE otherwise. 
 */
function feeds_plugin_child($plugin, $parent_plugin) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('feeds', 'plugins');
  $info = $plugins[$plugin];

  if (empty($info['handler']['parent'])) {
    return FALSE;
  }
  elseif ($info['handler']['parent'] == $parent_plugin) {
    return TRUE;
  }
  else {
    return feeds_plugin_child($info['handler']['parent'], $parent_plugin);
  }
}