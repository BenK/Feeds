<?php
// $Id: feeds.module,v 1.7 2009/09/21 14:55:47 alexb Exp $
/**
 * @file
 * Feeds module.
 */

/**
 * Implementation of hook_cron().
 */
function feeds_cron() {
  feeds_include('queue');
  feeds_queue_refresh();
}

/**
 * Implementation of hook_perm().
 */
function feeds_perm() {
  return array('use feeds', 'administer feeds');
}

/**
 * Implementation of hook_form_alter().
 */
function feeds_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    $feeds = feeds_load_all();
    foreach ($feeds as $feed) {
      $config = $feed->getConfig();
      if ($config['content_type'] == $form['type']['#value']) {
        $form['feeds'] = array(
          '#type' => 'fieldset',
          '#title' => t('Feed'),
        );
        $form['feeds'] += $feed->fetcher->sourceForm($form_state);
      }
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_feeds_plugins().
 */
function feeds_feeds_plugins() {
  $path = drupal_get_path('module', 'feeds') .'/plugins';

  $info = array();
  $info['FeedsFetcher'] = array(
    'handler' => array(
      'parent' => '',
      'class' => 'FeedsFetcher',
      'file' => 'FeedsFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsParser'] = array(
    'handler' => array(
      'class' => 'FeedsParser',
      'file' => 'FeedsParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsProcessor'] = array(
    'handler' => array(
      'class' => 'FeedsProcessor',
      'file' => 'FeedsProcessor.inc',
      'path' => $path,
    ),
  );
  $info['FeedsHttpFetcher'] = array(
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'FeedsHttpFetcher',
      'file' => 'FeedsHttpFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsFileFetcher'] = array(
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'FeedsFileFetcher',
      'file' => 'FeedsFileFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsCSVParser'] = array(
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsCSVParser',
      'file' => 'FeedsCSVParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsSyndicationParser'] = array(
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsSyndicationParser',
      'file' => 'FeedsSyndicationParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsNodeProcessor'] = array(
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'FeedsNodeProcessor',
      'file' => 'FeedsNodeProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Get all available plugins.
 */
function feeds_plugin_info() {
  ctools_include('plugins');
  $result = ctools_plugin_api_info('feeds', 'plugins', 0, 1);
  dsm($result);
}

/**
 * Get all available plugins.
 */
function feeds_get_plugins() {
  feeds_plugin_info();

  $result = array();
  $plugins = module_invoke_all('feeds_plugin');
  foreach ($plugins as $plugin => $info) {
    if ($info['parent'] == 'FeedsFetcher') { // @todo: walk tree.
      $result['fetcher'][$plugin] = $info;
    }
    elseif ($info['parent'] == 'FeedsParser') {
      $result['parser'][$plugin] = $info;
    }
    elseif ($info['parent'] == 'FeedsProcessor') {
      $result['processor'][$plugin] = $info;
    }
  }
  return $result;
}

/**
 * Load a plugin's file.
 */
function feeds_require_plugin($plugin) {
  static $required;
  $plugins = module_invoke_all('feeds_plugin');
  if ($plugins[$plugin]['file'] && empty($required[$plugin])) {
    require($plugins[$plugin]['file']);
    $required[$plugin] = TRUE;
  }
}

/**
 * Menu loader. Loads a feeds configuration.
 */
function feeds_load($id) {
  return feeds_get_feed($id);
}

/**
 * Load all feeds.
 */
function feeds_load_all() {
  ctools_include('export');
  $configs = ctools_export_load_object('feeds_config', 'conditions', array('class' => 'Feed'));
  foreach ($configs as $config) {
    $feeds[$config->id] = feeds_get_feed($config->id);
  }
  return $feeds;
}

/**
 * Singleton function.
 */
function feeds_get_feed($id) {
  static $instantiated;
  feeds_include('feed');
  if (!isset($instantiated[$id])) {
    $instantiated[$id] = new Feed($id);
  }
  return $instantiated[$id];
}

/**
 * Delete a feed.
 */
function feeds_delete($id) {
  db_query('DELETE FROM {feeds_config} WHERE id = "%s"', $id);
}

/**
 * Includes a feeds module include file.
 */
function feeds_include($file) {
  static $included = array();
  if (!isset($included[$file])) {
    require_once './' . drupal_get_path('module', 'feeds') . "/includes/$file.inc";
  }

  $included[$file] = TRUE;
}
