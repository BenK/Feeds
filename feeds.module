<?php
// $Id: feeds.module,v 1.7 2009/09/21 14:55:47 alexb Exp $
/**
 * @file
 * Feeds module.
 */

/**
 * Implementation of hook_cron().
 */
function feeds_cron() {
  feeds_include('queue');
  feeds_queue_refresh();
}

/**
 * Implementation of hook_perm().
 */
function feeds_perm() {
  return array('use feeds', 'administer feeds');
}

/**
 * Implementation of hook_form_alter().
 */
function feeds_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    $feeds = feeds_load_all();
    foreach ($feeds as $feed) {
      $config = $feed->getConfig();
      if ($config['content_type'] == $form['type']['#value']) {
        $form['feeds'] = array(
          '#type' => 'fieldset',
          '#title' => t('Feed'),
        );
        $form['feeds'] += $feed->fetcher->sourceForm($form_state);
      }
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function feeds_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_feeds_plugins().
 * 
 * @todo: Document API. Uses CTools plugin handling, extra keys:
 * 'description', 'hidden'
 */
function feeds_feeds_plugins() {
  $path = drupal_get_path('module', 'feeds') .'/plugins';

  $info = array();
  $info['FeedsFetcher'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'class' => 'FeedsFetcher',
      'file' => 'FeedsFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsParser'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'class' => 'FeedsParser',
      'file' => 'FeedsParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsProcessor'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'class' => 'FeedsProcessor',
      'file' => 'FeedsProcessor.inc',
      'path' => $path,
    ),
  );
  $info['FeedsHttpFetcher'] = array(
    'name' => 'HTTP Fetcher',
    'description' => 'Download content from a URL.',
    'handler' => array(
      'parent' => 'FeedsFetcher', // This is the key name, not the class name.
      'class' => 'FeedsHttpFetcher',
      'file' => 'FeedsHttpFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsFileFetcher'] = array(
    'name' => 'File fetcher',
    'description' => 'Upload content from a local file.',
    'handler' => array(
      'parent' => 'FeedsHttpFetcher',
      'class' => 'FeedsFileFetcher',
      'file' => 'FeedsFileFetcher.inc',
      'path' => $path,
    ),
  );
  $info['FeedsCSVParser'] = array(
    'name' => 'CSV parser',
    'description' => 'Parse data in Comma Separated Value format.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsCSVParser',
      'file' => 'FeedsCSVParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsSyndicationParser'] = array(
    'name' => 'Common syndication parser',
    'description' => 'Parse XML feeds in RSS 1, RSS 2 or Atom format.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'FeedsSyndicationParser',
      'file' => 'FeedsSyndicationParser.inc',
      'path' => $path,
    ),
  );
  $info['FeedsNodeProcessor'] = array(
    'name' => 'Node processor',
    'description' => 'Create nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'FeedsNodeProcessor',
      'file' => 'FeedsNodeProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Utility function. Get all available plugins categorized
 * by whether they are a fetcher, a parser or a processor.
 * 
 * Does not list hidden plugins.
 */
function feeds_get_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('feeds', 'plugins');

  $result = array();
  foreach ($plugins as $key => $info) {
    if ($info['hidden'] == TRUE) {
      continue;
    }
    if (_feeds_is_derived_from($key, 'FeedsFetcher')) {
      $result['fetcher'][$key] = $info;
    }
    elseif (_feeds_is_derived_from($key, 'FeedsParser')) {
      $result['parser'][$key] = $info;
    }
    elseif (_feeds_is_derived_from($key, 'FeedsProcessor')) {
      $result['processor'][$key] = $info;
    }
  }
  return $result;
}

/**
 * Load a plugin's class file.
 * 
 * @param $plugin
 *   The key of the plugin.
 * 
 * @return 
 *   String that identifies the class name associated with this plugin.
 *   The class name is the one specified in the plugins $info['handler'] property.
 */
function feeds_load_plugin_class($plugin) {
  return ctools_plugin_load_class('feeds', 'plugins', $plugin, 'handler');
}

/**
 * Menu loader. Loads a feeds configuration.
 */
function feeds_load($id) {
  return feeds_get_feed($id);
}

/**
 * Load all feeds.
 */
function feeds_load_all() {
  ctools_include('export');
  $configs = ctools_export_load_object('feeds_config', 'conditions', array('class' => 'Feed'));
  foreach ($configs as $config) {
    $feeds[$config->id] = feeds_get_feed($config->id);
  }
  return $feeds;
}

/**
 * Singleton function.
 */
function feeds_get_feed($id) {
  static $instantiated;
  feeds_include('feed');
  if (!isset($instantiated[$id])) {
    $instantiated[$id] = new Feed($id);
  }
  return $instantiated[$id];
}

/**
 * Delete a feed.
 */
function feeds_delete($id) {
  db_query('DELETE FROM {feeds_config} WHERE id = "%s"', $id);
}

/**
 * Includes a feeds module include file.
 */
function feeds_include($file) {
  static $included = array();
  if (!isset($included[$file])) {
    require_once './' . drupal_get_path('module', 'feeds') . "/includes/$file.inc";
  }

  $included[$file] = TRUE;
}

/**
 * Determines whether given plugin is derived from given base plugin.
 */
function _feeds_is_derived_from($plugin, $base_plugin) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('feeds', 'plugins');
  $info = $plugins[$plugin];

  if (empty($info['handler']['parent'])) {
    return FALSE;
  }
  elseif ($info['handler']['parent'] == $base_plugin) {
    return TRUE;
  }
  else {
    return _feeds_is_derived_from($info['handler']['parent'], $base_plugin);
  }
}